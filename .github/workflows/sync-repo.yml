name: Sync Repo

on:
  workflow_dispatch:
    inputs:
      source_repo:
        description: 'Source Repository (owner/repo)'
        required: true
        default: 'jwrdegoede/rtl8189ES_linux'
      source_branch:
        description: 'Source Branch'
        required: false
        default: ''
        type: string
      source_path:
        description: 'Source Path (leave empty for entire repo)'
        required: false
        default: ''
        type: string
      target_repo:
        description: 'Target Repository (owner/repo)'
        required: true
        default: 'xidz-repo/linux-6.12.y'
      target_branch:
        description: 'Target Branch'
        required: false
        default: ''
        type: string
      target_path:
        description: 'Target Path'
        required: true
        default: 'drivers/net/wireless/realtek/rtl8189fs'

jobs:
  transfer:
    runs-on: ubuntu-latest
    steps:
    - name: Complete Transfer with Hidden Files
      env:
        PAT_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      run: |
        # Validasi
        if [ -z "$PAT_TOKEN" ]; then
          echo "PERSONAL_ACCESS_TOKEN required!"
          echo "Create token at: https://github.com/settings/tokens"
          echo "Required scopes: repo, workflow"
          exit 1
        fi
        
        # Setup
        git config --global user.name "GitHub Action"
        git config --global user.email "action@github.com"
        
        # Clone source with branch selection
        echo "Cloning source..."
        git clone https://github.com/${{ github.event.inputs.source_repo }}.git source
        cd source
        
        # Determine source branch
        if [ -n "${{ github.event.inputs.source_branch }}" ]; then
          SOURCE_BRANCH="${{ github.event.inputs.source_branch }}"
          echo "Using specified source branch: $SOURCE_BRANCH"
        else
          SOURCE_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's@^refs/remotes/origin/@@' || echo "")
          if [ -z "$SOURCE_BRANCH" ]; then
            if git show-ref --verify --quiet refs/remotes/origin/main; then
              SOURCE_BRANCH="main"
            elif git show-ref --verify --quiet refs/remotes/origin/master; then
              SOURCE_BRANCH="master"
            else
              SOURCE_BRANCH=$(git branch -r | head -1 | sed 's|origin/||' | xargs)
            fi
          fi
          echo "Auto-detected source branch: $SOURCE_BRANCH"
        fi
        
        git checkout $SOURCE_BRANCH || {
          echo "Failed to checkout source branch: $SOURCE_BRANCH"
          echo "Available branches:"
          git branch -r
          exit 1
        }
        cd ..
        
        # Clone target with branch selection
        echo "Cloning target..."
        git clone https://${PAT_TOKEN}@github.com/${{ github.event.inputs.target_repo }}.git target
        cd target
        
        # Determine target branch
        if [ -n "${{ github.event.inputs.target_branch }}" ]; then
          TARGET_BRANCH="${{ github.event.inputs.target_branch }}"
          echo "Using specified target branch: $TARGET_BRANCH"
          
          # Check if branch exists remotely
          if git show-ref --verify --quiet refs/remotes/origin/$TARGET_BRANCH; then
            git checkout $TARGET_BRANCH
          else
            echo "Creating new target branch: $TARGET_BRANCH"
            git checkout -b $TARGET_BRANCH
          fi
        else
          # Auto-detect default branch
          if git show-ref --verify --quiet refs/remotes/origin/main; then
            TARGET_BRANCH="main"
            git checkout main
          elif git show-ref --verify --quiet refs/remotes/origin/master; then
            TARGET_BRANCH="master"
            git checkout master
          else
            TARGET_BRANCH="main"
            git checkout -b main
          fi
          echo "Using default target branch: $TARGET_BRANCH"
        fi
        cd ..
        
        # Prepare target directory
        mkdir -p target/${{ github.event.inputs.target_path }}
        
        # Copy files based on source_path
        if [ -n "${{ github.event.inputs.source_path }}" ]; then
          # Copy specific path from source
          SOURCE_PATH="${{ github.event.inputs.source_path }}"
          echo "Copying from specific source path: $SOURCE_PATH"
          
          # Check if source path exists
          if [ ! -e "source/$SOURCE_PATH" ]; then
            echo "Error: Source path '$SOURCE_PATH' does not exist in repository"
            echo "Available paths in source:"
            find source -maxdepth 2 -type d | head -20
            exit 1
          fi
          
          # Copy specific path
          if [ -d "source/$SOURCE_PATH" ]; then
            # If it's a directory, copy contents including hidden files
            cp -r source/$SOURCE_PATH/. target/${{ github.event.inputs.target_path }}/
          else
            # If it's a file, copy the file
            cp source/$SOURCE_PATH target/${{ github.event.inputs.target_path }}/
          fi
        else
          # Copy entire repository including hidden files
          echo "Copying entire repository (including .github)..."
          cp -r source/. target/${{ github.event.inputs.target_path }}/
        fi
        
        # Remove .git directory from copied files
        rm -rf target/${{ github.event.inputs.target_path }}/.git
        
        # Show what was copied
        echo "Files copied to target:"
        ls -la target/${{ github.event.inputs.target_path }}/ | head -10
        
        # Show .github files if they exist
        if [ -d "target/${{ github.event.inputs.target_path }}/.github" ]; then
          echo ".github files copied:"
          find target/${{ github.event.inputs.target_path }}/.github -type f 2>/dev/null
        fi
        
        # Set source path for commit message
        if [ -n "${{ github.event.inputs.source_path }}" ]; then
          SOURCE_PATH_MSG="/${{ github.event.inputs.source_path }}"
        else
          SOURCE_PATH_MSG=" (entire repository)"
        fi
        
        # Commit and push
        echo "Committing..."
        cd target
        git add .
        git commit -m "Transfer repository content including .github/workflows
        
        From: ${{ github.event.inputs.source_repo }}$SOURCE_PATH_MSG (branch: $SOURCE_BRANCH)
        To: ${{ github.event.inputs.target_path }} (branch: $TARGET_BRANCH)
        Date: $(date -u)" || echo "No changes"
        
        git push https://${PAT_TOKEN}@github.com/${{ github.event.inputs.target_repo }}.git $TARGET_BRANCH
        
        # Cleanup
        cd .. && rm -rf source target
        echo "Transfer completed!"
        echo "Summary:"
        echo "  Source: ${{ github.event.inputs.source_repo }}$SOURCE_PATH_MSG@$SOURCE_BRANCH"
        echo "  Target: ${{ github.event.inputs.target_repo }}@$TARGET_BRANCH"
        echo "  Target Path: ${{ github.event.inputs.target_path }}"